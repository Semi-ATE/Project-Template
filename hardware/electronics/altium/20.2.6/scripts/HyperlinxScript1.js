var   comp,filename;
var   fileexits = false;
var   filename;
var   StrList;

function Button1Click(Sender)
{
 comp = Edit1.Text;
 SearchComponents(comp);
}

function Button2Click(Sender)
{
 if (SaveDialog1.Execute())
 {
    filename = SaveDialog1.FileName;
    Edit2.Text = filename;
    Memo1.Lines.Add("Output File has been selected");
    fileexits = true;
 }
 else
 {
     filename = "";
     fileexits = false;
 }
}

function FetchNetsOfComponent(Doc,ComponentName)
{
var      i,j;
var      Comp;
var      Pin;
var      str;
var      mPart;
var      found;

 found = false;
 for (i = 0;i < Doc.DM_ComponentCount;i++)
 {
  Comp = Doc.DM_Components(i);
  if (Comp.DM_LogicalDesignator == ComponentName)
  {
   found = true;
   if (Comp.DM_SubPartCount == 1)
   {
    pBuf = "Component: ";
    pBuf += Comp.DM_LogicalDesignator;
    Memo1.Lines.Add(pBuf);
    for(j=0;j<Comp.DM_PinCount;j++)
    {
     Pin = Comp.DM_Pins(j);
     if (Pin.DM_NetName != "?")
     {
      str = ComponentName;
      str += ",";
      str += Pin.DM_PinNumber;
      str += ",";
      str += Pin.DM_NetName;
      StrList.Add(str);
     }
    }
   }
   else
     if (Comp.DM_SubPartCount > 1)
     {
      for (j = 0;j < Comp.DM_SubPartCount;j++)
      {
            pBuf = "Component: ";
            pBuf += Comp.DM_LogicalDesignator;
            pBuf += ", Subpart: ";
            pBuf += j.toString();
            Memo1.Lines.Add(pBuf);
            Part = Comp.DM_SubParts(j)
            for(k=0;k<Comp.DM_PinCount;k++)
            {
             Pin = Part.DM_Pins(k);
             if (Pin.DM_NetName != "?")
             {
              str = ComponentName;
              str += ",";
              str += Pin.DM_PinNumber;
              str += ",";
              str += Pin.DM_NetName;
              net = Pin.DM_OwnerNetLogical;
              if (net.DM_IsBusElement)
              {
                 str += "[";
                 str += net.DM_BusIndex;
                 str += "]";
                 str += ",";
                 str += "member of bus "
                 str += net.DM_BusPrefix;
                 bus = net.DM_BusSectionParent;
                 if (bus != NULL)
                 {
                  str += "[";
                  str += bus.DM_BusRangeValue1;
                  str += ":"
                  str += bus.DM_BusRangeValue2;
                  str += "]";
                 }
                 else
                 {
                  str += "[unknown]";
                 }
              }
              else
                  if (net.DM_IsAutoGenerated)
                  {
                   str += ",";
                   str += "auto generated";
                  }
              StrList.Add(str);
             }
            }
      }
     }
    }
 }
 return found;
}

function SearchComponents(comp)
{
 var PrjName;
 var StrBuf;
 var n;
 var DocNum;
 var Doc;
 var DocType;

 Memo1.Clear();
 var PcbProject = GetWorkspace.DM_FocusedProject;
 if (PcbProject == NULL)
 {
  ShowMessage("No active project");
  return;
 }
 if (AnsiUpperCase(ExtractFileExt(PcbProject.DM_ProjectFileName)) != ".PRJPCB")
 {
  ShowMessage("Current Project is not a PCB Project");
  return;
 }
 PcbProject.DM_Compile();
 PrjName = ExtractFileName(PcbProject.DM_ProjectFileName);
 StrBuf = "Project Name: ";
 StrBuf += PrjName;
 StrBuf = "Number of Project Documents: ";
 n = PcbProject.DM_LogicalDocumentCount;
 StrBuf += n.toString();
 Memo1.Lines.Add(StrBuf);
 StrList.Clear();
 for (DocNum = 0;DocNum < PcbProject.DM_LogicalDocumentCount;DocNum++)
 {
  Doc = PcbProject.DM_LogicalDocuments(DocNum);
  DocType = Doc.DM_DocumentKind;
  if (DocType == "SCH")
  {
     if (!Client.IsDocumentOpen(Doc.DM_FullPath))
        Client.ShowDocument(Client.OpenDocument("Sch",Doc.DM_FullPath));
     StrBuf = "Document Name: ";
     StrBuf += ExtractFileName(Doc.DM_FullPath);
     StrBuf += ", Number of Components: ";
     n = Doc.DM_ComponentCount;
     StrBuf += n.toString();
     Memo1.Lines.Add(StrBuf);;
     if (FetchNetsOfComponent(Doc,Edit1.Text))
        ;
  }
 }
 if (fileexits)
    StrList.SaveToFile(filename);
 Memo1.Lines.Add("... all done.");
}

function Form1Show(Sender)
{
 StrList = TStringList.Create();
 Memo1.Clear();
}

function Form1Close(Sender, Action)
{
 delete StrList;
}
